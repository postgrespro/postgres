<!--
doc/src/sgml/ref/alter_tsconfig.sgml
PostgreSQL documentation
-->

<refentry id="sql-altertsconfig">
 <indexterm zone="sql-altertsconfig">
  <primary>ALTER TEXT SEARCH CONFIGURATION</primary>
 </indexterm>

 <refmeta>
  <refentrytitle>ALTER TEXT SEARCH CONFIGURATION</refentrytitle>
  <manvolnum>7</manvolnum>
  <refmiscinfo>SQL - Language Statements</refmiscinfo>
 </refmeta>

 <refnamediv>
  <refname>ALTER TEXT SEARCH CONFIGURATION</refname>
  <refpurpose>change the definition of a text search configuration</refpurpose>
 </refnamediv>

 <refsynopsisdiv>
<synopsis>
ALTER TEXT SEARCH CONFIGURATION <replaceable>name</replaceable>
    ADD MAPPING FOR <replaceable class="parameter">token_type</replaceable> [, ... ] WITH <replaceable class="parameter">dictionaries_map</replaceable>
ALTER TEXT SEARCH CONFIGURATION <replaceable>name</replaceable>
    ADD MAPPING FOR <replaceable class="parameter">token_type</replaceable> [, ... ] WITH <replaceable class="parameter">dictionary_name</replaceable> [, ... ]
ALTER TEXT SEARCH CONFIGURATION <replaceable>name</replaceable>
    ALTER MAPPING FOR <replaceable class="parameter">token_type</replaceable> [, ... ] WITH <replaceable class="parameter">dictionaries_map</replaceable>
ALTER TEXT SEARCH CONFIGURATION <replaceable>name</replaceable>
    ALTER MAPPING FOR <replaceable class="parameter">token_type</replaceable> [, ... ] WITH <replaceable class="parameter">dictionary_name</replaceable> [, ... ]
ALTER TEXT SEARCH CONFIGURATION <replaceable>name</replaceable>
    ALTER MAPPING REPLACE <replaceable class="parameter">old_dictionary</replaceable> WITH <replaceable class="parameter">new_dictionary</replaceable>
ALTER TEXT SEARCH CONFIGURATION <replaceable>name</replaceable>
    ALTER MAPPING FOR <replaceable class="parameter">token_type</replaceable> [, ... ] REPLACE <replaceable class="parameter">old_dictionary</replaceable> WITH <replaceable class="parameter">new_dictionary</replaceable>
ALTER TEXT SEARCH CONFIGURATION <replaceable>name</replaceable>
    DROP MAPPING [ IF EXISTS ] FOR <replaceable class="parameter">token_type</replaceable> [, ... ]
ALTER TEXT SEARCH CONFIGURATION <replaceable>name</replaceable> RENAME TO <replaceable>new_name</replaceable>
ALTER TEXT SEARCH CONFIGURATION <replaceable>name</replaceable> OWNER TO { <replaceable>new_owner</replaceable> | CURRENT_USER | SESSION_USER }
ALTER TEXT SEARCH CONFIGURATION <replaceable>name</replaceable> SET SCHEMA <replaceable>new_schema</replaceable>
</synopsis>
 </refsynopsisdiv>

 <refsect1>
  <title>Description</title>

  <para>
   <command>ALTER TEXT SEARCH CONFIGURATION</command> changes the definition of
   a text search configuration.  You can modify
   its mappings from token types to dictionaries,
   or change the configuration's name or owner.
  </para>

  <para>
   You must be the owner of the configuration to use
   <command>ALTER TEXT SEARCH CONFIGURATION</command>.
  </para>
 </refsect1>

 <refsect1>
  <title>Parameters</title>

  <variablelist>
   <varlistentry>
    <term><replaceable class="parameter">name</replaceable></term>
    <listitem>
     <para>
      The name (optionally schema-qualified) of an existing text search
      configuration.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">token_type</replaceable></term>
    <listitem>
     <para>
      The name of a token type that is emitted by the configuration's
      parser.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">dictionary_name</replaceable></term>
    <listitem>
     <para>
      The name of a text search dictionary to be consulted for the
      specified token type(s).  If multiple dictionaries are listed,
      they are consulted in the specified order.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">dictionary_expression</replaceable></term>
    <listitem>
     <para>
      The expression of dictionaries tree. The dctionary expression
      is a triple of condition/command/elsebranch that define way to process
      text. The elsebranch part is optional.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">old_dictionary</replaceable></term>
    <listitem>
     <para>
      The name of a text search dictionary to be replaced in the mapping.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">new_dictionary</replaceable></term>
    <listitem>
     <para>
      The name of a text search dictionary to be substituted for
      <replaceable class="parameter">old_dictionary</replaceable>.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">new_name</replaceable></term>
    <listitem>
     <para>
      The new name of the text search configuration.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">new_owner</replaceable></term>
    <listitem>
     <para>
      The new owner of the text search configuration.
     </para>
    </listitem>
   </varlistentry>

   <varlistentry>
    <term><replaceable class="parameter">new_schema</replaceable></term>
    <listitem>
     <para>
      The new schema for the text search configuration.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>

  <para>
   The <literal>ADD MAPPING FOR</literal> form installs a list of dictionaries to be
   consulted for the specified token type(s); it is an error if there is
   already a mapping for any of the token types.
   The <literal>ALTER MAPPING FOR</literal> form does the same, but first removing
   any existing mapping for those token types.
   The <literal>ALTER MAPPING REPLACE</literal> forms substitute <replaceable
   class="parameter">new_dictionary</replaceable> for <replaceable
   class="parameter">old_dictionary</replaceable> anywhere the latter appears.
   This is done for only the specified token types when <literal>FOR</literal>
   appears, or for all mappings of the configuration when it doesn't.
   The <literal>DROP MAPPING</literal> form removes all dictionaries for the
   specified token type(s), causing tokens of those types to be ignored
   by the text search configuration.  It is an error if there is no mapping
   for the token types, unless <literal>IF EXISTS</literal> appears.
  </para>

 </refsect1>

 <refsect1>
  <title>Dictionaries map</title>

  <refsect2>
   <title>Format</title>
   <programlisting>
    <replaceable class="parameter">dictionary_name</replaceable>

    <replaceable class="parameter">dictionaries_map</replaceable> { UNION | EXCEPT | INTERSECT | MAP } <replaceable class="parameter">dictionaries_map</replaceable>

    CASE
      <replaceable class="parameter">dictionaries_map</replaceable> WHEN <optional>NO</optional> MATCH THEN <replaceable class="parameter">command</replaceable>
      <optional> ELSE <replaceable class="parameter">dictionaries_map</replaceable> </optional>
    END
   </programlisting>
   <para>
    A command is
   </para>

   <programlisting>
    <replaceable class="parameter">dictionaries_map</replaceable>
    or
    KEEP
   </programlisting>
  </refsect2>

  <refsect2>
   <title>Description</title>
   <para>
    <replaceable class="parameter">dictionaries_map</replaceable> can be used
    in three different formats. The most simple format is name of dictionary to
    use for tokens processing.
   </para>
   <para>
    In order to use more than one dictionary
    simultaneously use should interconnect dictionaries by operators. Operators
    <literal>UNION</literal>, <literal>EXCEPT</literal> and 
    <literal>INTERSECT</literal> have same meaning as in operations on sets.
    Special operator <literal>MAP</literal> gets output of left subexpression
    and uses it as an input to right subexpression.
   </para>
   <para>
    The last but not the least format of
    <replaceable class="parameter">dictionaries_map</replaceable> is similar to
    <literal>CASE/WHEN/THEN/ELSE</literal> structure. It consists of three
    replaceable parts. First one is configuration who to construct lexemes set
    for matching check. If the condition is triggered, the command is executed.
    Use command <literal>KEEP</literal> in order to avoid repeating of the same
    configuration in condition and command part. However, command differ from
    condition configuration. The <literal>ELSE</literal> branch is executed
    overwise.
   </para>
  </refsect2>
 </refsect1>

 <refsect1>
  <title>Examples</title>

  <para>
   The following example replaces the <literal>english</literal> dictionary
   with the <literal>swedish</literal> dictionary anywhere that <literal>english</literal>
   is used within <literal>my_config</literal>.
  </para>

<programlisting>
ALTER TEXT SEARCH CONFIGURATION my_config
  ALTER MAPPING REPLACE english WITH swedish;
</programlisting>
 </refsect1>

 <refsect1>
  <title>Compatibility</title>

  <para>
   There is no <command>ALTER TEXT SEARCH CONFIGURATION</command> statement in
   the SQL standard.
  </para>
 </refsect1>

 <refsect1>
  <title>See Also</title>

  <simplelist type="inline">
   <member><xref linkend="sql-createtsconfig"/></member>
   <member><xref linkend="sql-droptsconfig"/></member>
  </simplelist>
 </refsect1>
</refentry>
