CREATE EXTENSION jsonb_plpython3u CASCADE;
NOTICE:  installing required extension "plpython3u"
-- test jsonb -> python dict
CREATE FUNCTION test1(val jsonb) RETURNS int
LANGUAGE plpython3u
TRANSFORM FOR TYPE jsonb
AS $$
#assert isinstance(val, dict)
assert(val == {'a': 1, 'c': 'NULL'})
return len(val)
$$;
SELECT test1('{"a": 1, "c": "NULL"}'::jsonb);
 test1 
-------
     2
(1 row)

-- test jsonb -> python dict
-- complex dict with dicts as value
CREATE FUNCTION test1complex(val jsonb) RETURNS int
LANGUAGE plpython3u
TRANSFORM FOR TYPE jsonb
AS $$
#assert isinstance(val, dict)
assert(val == {"d": {"d": 1}})
return len(val)
$$;
SELECT test1complex('{"d": {"d": 1}}'::jsonb);
 test1complex 
--------------
            1
(1 row)

-- test jsonb[] -> python dict
-- dict with array as value
CREATE FUNCTION test1arr(val jsonb) RETURNS int
LANGUAGE plpython3u
TRANSFORM FOR TYPE jsonb
AS $$
#assert isinstance(val, dict)
assert(val == {"d": [12, 1]})
return len(val)
$$;
SELECT test1arr('{"d":[12, 1]}'::jsonb);
 test1arr 
----------
        1
(1 row)

-- test jsonb[] -> python list
-- simple list
CREATE FUNCTION test2arr(val jsonb) RETURNS int
LANGUAGE plpython3u
TRANSFORM FOR TYPE jsonb
AS $$
#assert isinstance(val, list)
assert(val == [12, 1])
return len(val)
$$;
SELECT test2arr('[12, 1]'::jsonb);
 test2arr 
----------
        2
(1 row)

-- test jsonb[] -> python list
-- array of dicts
CREATE FUNCTION test3arr(val jsonb) RETURNS int
LANGUAGE plpython3u
TRANSFORM FOR TYPE jsonb
AS $$
#assert isinstance(val, list)
assert(val == [{"a": 1,"b": 2}, {"c": 3,"d": 4}])
return len(val)
$$;
SELECT test3arr('[{"a": 1, "b": 2}, {"c": 3,"d": 4}]'::jsonb);
 test3arr 
----------
        2
(1 row)

-- test jsonb int -> python int
CREATE FUNCTION test1int(val jsonb) RETURNS int
LANGUAGE plpython3u
TRANSFORM FOR TYPE jsonb
AS $$
assert(val == 1)
return val
$$;
SELECT test1int('1'::jsonb);
 test1int 
----------
        1
(1 row)

-- test jsonb string -> python string
CREATE FUNCTION test1string(val jsonb) RETURNS text
LANGUAGE plpython3u
TRANSFORM FOR TYPE jsonb
AS $$
assert(val == "a")
return val
$$;
SELECT test1string('"a"'::jsonb);
 test1string 
-------------
 a
(1 row)

-- test jsonb null -> python None
CREATE FUNCTION test1null(val jsonb) RETURNS int
LANGUAGE plpython3u
TRANSFORM FOR TYPE jsonb
AS $$
assert(val == None)
return 1
$$;
SELECT test1null('null'::jsonb);
 test1null 
-----------
         1
(1 row)

-- test python -> jsonb
CREATE FUNCTION roundtrip(val jsonb) RETURNS jsonb
LANGUAGE plpython3u
TRANSFORM FOR TYPE jsonb
as $$
return val
$$;
SELECT roundtrip('null'::jsonb);
 roundtrip 
-----------
 
(1 row)

SELECT roundtrip('1'::jsonb);
 roundtrip 
-----------
 1
(1 row)

SELECT roundtrip('1234567890.0987654321'::jsonb);
       roundtrip       
-----------------------
 1234567890.0987654321
(1 row)

SELECT roundtrip('-1234567890.0987654321'::jsonb);
       roundtrip        
------------------------
 -1234567890.0987654321
(1 row)

SELECT roundtrip('true'::jsonb);
 roundtrip 
-----------
 true
(1 row)

SELECT roundtrip('false'::jsonb);
 roundtrip 
-----------
 false
(1 row)

SELECT roundtrip('"string"'::jsonb);
 roundtrip 
-----------
 "string"
(1 row)

SELECT roundtrip('{"1": null}'::jsonb);
  roundtrip  
-------------
 {"1": null}
(1 row)

SELECT roundtrip('{"1": 1}'::jsonb);
 roundtrip 
-----------
 {"1": 1}
(1 row)

SELECT roundtrip('{"1": true}'::jsonb);
  roundtrip  
-------------
 {"1": true}
(1 row)

SELECT roundtrip('{"1": "string"}'::jsonb);
    roundtrip    
-----------------
 {"1": "string"}
(1 row)

SELECT roundtrip('[null]'::jsonb);
 roundtrip 
-----------
 [null]
(1 row)

SELECT roundtrip('[1]'::jsonb);
 roundtrip 
-----------
 [1]
(1 row)

SELECT roundtrip('[true]'::jsonb);
 roundtrip 
-----------
 [true]
(1 row)

SELECT roundtrip('["string"]'::jsonb);
 roundtrip  
------------
 ["string"]
(1 row)

SELECT roundtrip('[null, 1]'::jsonb);
 roundtrip 
-----------
 [null, 1]
(1 row)

SELECT roundtrip('[1, true]'::jsonb);
 roundtrip 
-----------
 [1, true]
(1 row)

SELECT roundtrip('[true, "string"]'::jsonb);
    roundtrip     
------------------
 [true, "string"]
(1 row)

SELECT roundtrip('["string", "string2"]'::jsonb);
       roundtrip       
-----------------------
 ["string", "string2"]
(1 row)

-- complex numbers -> jsonb
CREATE FUNCTION testComplexNumbers() RETURNS jsonb
LANGUAGE plpython3u
TRANSFORM FOR TYPE jsonb
AS $$
x = 1 + 2j
return x
$$;
SELECT testComplexNumbers();
ERROR:  could not convert value "(1+2j)" to jsonb
CONTEXT:  while creating return value
PL/Python function "testcomplexnumbers"
-- range -> jsonb
CREATE FUNCTION testRange() RETURNS jsonb
LANGUAGE plpython3u
TRANSFORM FOR TYPE jsonb
AS $$
x = range(3)
return x
$$;
SELECT testRange();
 testrange 
-----------
 [0, 1, 2]
(1 row)

-- 0xff -> jsonb
CREATE FUNCTION testDecimal() RETURNS jsonb
LANGUAGE plpython3u
TRANSFORM FOR TYPE jsonb
AS $$
x = 0xff
return x
$$;
SELECT testDecimal();
 testdecimal 
-------------
 255
(1 row)

-- tuple -> jsonb
CREATE FUNCTION testTuple() RETURNS jsonb
LANGUAGE plpython3u
TRANSFORM FOR TYPE jsonb
AS $$
x = (1, 'String', None)
return x
$$;
SELECT testTuple();
      testtuple      
---------------------
 [1, "String", null]
(1 row)

-- interesting dict -> jsonb
CREATE FUNCTION test_dict1() RETURNS jsonb
LANGUAGE plpython3u
TRANSFORM FOR TYPE jsonb
AS $$
x = {"a": 1, None: 2, 33: 3}
return x
$$;
SELECT test_dict1();
        test_dict1        
--------------------------
 {"": 2, "a": 1, "33": 3}
(1 row)

-- eval arbitrary Python code on jsonb
CREATE OR REPLACE FUNCTION jsonb_plpy_eval(js jsonb, code text) RETURNS jsonb
LANGUAGE plpython3u
TRANSFORM FOR TYPE jsonb
AS $$
  try:
    return eval(code, { '_' : js })
  except Exception as ex:
    raise ex
$$;
-- test array type
SELECT jsonb_plpy_eval('[]', 'type(_)');
          jsonb_plpy_eval          
-----------------------------------
 "<class 'plpy_jsonb.JsonbArray'>"
(1 row)

-- test len() for arrays
SELECT jsonb_plpy_eval('[]', 'len(_)');
 jsonb_plpy_eval 
-----------------
 0
(1 row)

SELECT jsonb_plpy_eval('[1, "2", {"a": 1}]', 'len(_)');
 jsonb_plpy_eval 
-----------------
 3
(1 row)

-- test array subscripting
SELECT jsonb_plpy_eval('[]', '_[0]');
ERROR:  IndexError: JsonbArray index out of range
CONTEXT:  Traceback (most recent call last):
  PL/Python function "jsonb_plpy_eval", line 5, in <module>
    raise ex
  PL/Python function "jsonb_plpy_eval", line 3, in __plpython_procedure_jsonb_plpy_eval_16411
    return eval(code, { '_' : js })
  PL/Python function "jsonb_plpy_eval", line 0, in <module>
    def __plpython_procedure_jsonb_plpy_eval_16411():
PL/Python function "jsonb_plpy_eval"
SELECT jsonb_plpy_eval('[1]', '_["0"]');
ERROR:  TypeError: JsonbArray indices must be integers or slices, not str
CONTEXT:  Traceback (most recent call last):
  PL/Python function "jsonb_plpy_eval", line 5, in <module>
    raise ex
  PL/Python function "jsonb_plpy_eval", line 3, in __plpython_procedure_jsonb_plpy_eval_16411
    return eval(code, { '_' : js })
  PL/Python function "jsonb_plpy_eval", line 0, in <module>
    def __plpython_procedure_jsonb_plpy_eval_16411():
PL/Python function "jsonb_plpy_eval"
SELECT jsonb_plpy_eval('[1, "2", {"a": 3}]', '_[0]');
 jsonb_plpy_eval 
-----------------
 1
(1 row)

SELECT jsonb_plpy_eval('[1, "2", {"a": 3}]', '_[1]');
 jsonb_plpy_eval 
-----------------
 "2"
(1 row)

SELECT jsonb_plpy_eval('[1, "2", {"a": 3}]', '_[2]');
 jsonb_plpy_eval 
-----------------
 {"a": 3}
(1 row)

SELECT jsonb_plpy_eval('[1, "2", {"a": 3}]', '_[3]');
ERROR:  IndexError: JsonbArray index out of range
CONTEXT:  Traceback (most recent call last):
  PL/Python function "jsonb_plpy_eval", line 5, in <module>
    raise ex
  PL/Python function "jsonb_plpy_eval", line 3, in __plpython_procedure_jsonb_plpy_eval_16411
    return eval(code, { '_' : js })
  PL/Python function "jsonb_plpy_eval", line 0, in <module>
    def __plpython_procedure_jsonb_plpy_eval_16411():
PL/Python function "jsonb_plpy_eval"
SELECT jsonb_plpy_eval('[1, "2", {"a": 3}]', '_[-1]');
 jsonb_plpy_eval 
-----------------
 {"a": 3}
(1 row)

SELECT jsonb_plpy_eval('[1, "2", {"a": 3}]', '_[-2]');
 jsonb_plpy_eval 
-----------------
 "2"
(1 row)

SELECT jsonb_plpy_eval('[1, "2", {"a": 3}]', '_[-3]');
 jsonb_plpy_eval 
-----------------
 1
(1 row)

SELECT jsonb_plpy_eval('[1, "2", {"a": 3}]', '_[-4]');
ERROR:  IndexError: JsonbArray index out of range
CONTEXT:  Traceback (most recent call last):
  PL/Python function "jsonb_plpy_eval", line 5, in <module>
    raise ex
  PL/Python function "jsonb_plpy_eval", line 3, in __plpython_procedure_jsonb_plpy_eval_16411
    return eval(code, { '_' : js })
  PL/Python function "jsonb_plpy_eval", line 0, in <module>
    def __plpython_procedure_jsonb_plpy_eval_16411():
PL/Python function "jsonb_plpy_eval"
-- test array slicing
SELECT jsonb_plpy_eval('[1, "2", {"a": 3}]', '_[:]');
  jsonb_plpy_eval   
--------------------
 [1, "2", {"a": 3}]
(1 row)

SELECT jsonb_plpy_eval('[1, "2", {"a": 3}]', '_[:1]');
 jsonb_plpy_eval 
-----------------
 [1]
(1 row)

SELECT jsonb_plpy_eval('[1, "2", {"a": 3}]', '_[:5]');
  jsonb_plpy_eval   
--------------------
 [1, "2", {"a": 3}]
(1 row)

SELECT jsonb_plpy_eval('[1, "2", {"a": 3}]', '_[1:]');
 jsonb_plpy_eval 
-----------------
 ["2", {"a": 3}]
(1 row)

SELECT jsonb_plpy_eval('[1, "2", {"a": 3}]', '_[5:]');
 jsonb_plpy_eval 
-----------------
 []
(1 row)

SELECT jsonb_plpy_eval('[1, "2", {"a": 3}]', '_[0:0]');
 jsonb_plpy_eval 
-----------------
 []
(1 row)

SELECT jsonb_plpy_eval('[1, "2", {"a": 3}]', '_[1:3]');
 jsonb_plpy_eval 
-----------------
 ["2", {"a": 3}]
(1 row)

SELECT jsonb_plpy_eval('[1, "2", {"a": 3}]', '_[0:-1]');
 jsonb_plpy_eval 
-----------------
 [1, "2"]
(1 row)

SELECT jsonb_plpy_eval('[1, "2", {"a": 3}]', '_[0:4:2]');
 jsonb_plpy_eval 
-----------------
 [1, {"a": 3}]
(1 row)

SELECT jsonb_plpy_eval('[1, "2", {"a": 3}]', '_[::-1]');
  jsonb_plpy_eval   
--------------------
 [{"a": 3}, "2", 1]
(1 row)

SELECT jsonb_plpy_eval('[1, "2", {"a": 3}]', '_[1::-1]');
 jsonb_plpy_eval 
-----------------
 ["2", 1]
(1 row)

SELECT jsonb_plpy_eval('[1, "2", {"a": 3}]', '_[-2::-1]');
 jsonb_plpy_eval 
-----------------
 ["2", 1]
(1 row)

SELECT jsonb_plpy_eval('[1, "2", {"a": 3}]', '_[:-3:-1]');
 jsonb_plpy_eval 
-----------------
 [{"a": 3}, "2"]
(1 row)

SELECT jsonb_plpy_eval('[1, "2", {"a": 3}]', '_[-1:1:-1]');
 jsonb_plpy_eval 
-----------------
 [{"a": 3}]
(1 row)

-- test array .count() method
SELECT jsonb_plpy_eval('[1, 2, null, 1, [1, 5], 1, "1"]', '_.count(1)');
 jsonb_plpy_eval 
-----------------
 3
(1 row)

SELECT jsonb_plpy_eval('[1, 2, null, 1, [1, 5], 1, "1"]', '_.count("x")');
 jsonb_plpy_eval 
-----------------
 0
(1 row)

SELECT jsonb_plpy_eval('[1, 2, null, 1, [1, 5], 1, "1"]', '_.count([1, 5])');
 jsonb_plpy_eval 
-----------------
 1
(1 row)

SELECT jsonb_plpy_eval('[1, 2, null, 1, [1, 5], 1, "1"]', '_.count([5, 1])');
 jsonb_plpy_eval 
-----------------
 0
(1 row)

-- test array .index() method
SELECT jsonb_plpy_eval('[1, 2, null, 1, [1, 5], 1, "1"]', '_.index(0)');
ERROR:  ValueError: value is not in JsonbArray
CONTEXT:  Traceback (most recent call last):
  PL/Python function "jsonb_plpy_eval", line 5, in <module>
    raise ex
  PL/Python function "jsonb_plpy_eval", line 3, in __plpython_procedure_jsonb_plpy_eval_16411
    return eval(code, { '_' : js })
  PL/Python function "jsonb_plpy_eval", line 0, in <module>
    def __plpython_procedure_jsonb_plpy_eval_16411():
PL/Python function "jsonb_plpy_eval"
SELECT jsonb_plpy_eval('[1, 2, null, 1, [1, 5], 1, "1"]', '_.index(1)');
 jsonb_plpy_eval 
-----------------
 0
(1 row)

SELECT jsonb_plpy_eval('[1, 2, null, 1, [1, 5], 1, "1"]', '_.index(2)');
 jsonb_plpy_eval 
-----------------
 1
(1 row)

SELECT jsonb_plpy_eval('[1, 2, null, 1, [1, 5], 1, "1"]', '_.index(None)');
 jsonb_plpy_eval 
-----------------
 2
(1 row)

SELECT jsonb_plpy_eval('[1, 2, null, 1, [1, 5], 1, "1"]', '_.index("1")');
 jsonb_plpy_eval 
-----------------
 6
(1 row)

SELECT jsonb_plpy_eval('[1, 2, null, 1, [1, 5], 1, "1"]', '_.index([1, 5])');
 jsonb_plpy_eval 
-----------------
 4
(1 row)

-- test array iteration
SELECT jsonb_plpy_eval('[]', 'type(iter(_))');
           jsonb_plpy_eval           
-------------------------------------
 "<type 'plpy_jsonb.JsonbIterator'>"
(1 row)

SELECT jsonb_plpy_eval('[1, 2, null, 1, [1, 5], 1, "1"]', 'iter(_)');
         jsonb_plpy_eval         
---------------------------------
 [1, 2, null, 1, [1, 5], 1, "1"]
(1 row)

SELECT jsonb_plpy_eval('[1, 2, null, 1, [1, 5], 1, "1"]', '[x for x in _]');
         jsonb_plpy_eval         
---------------------------------
 [1, 2, null, 1, [1, 5], 1, "1"]
(1 row)

SELECT jsonb_plpy_eval('[1, 2, null, 1, [1, 5], 1, "1"]', '[x for x in iter(_)]');
         jsonb_plpy_eval         
---------------------------------
 [1, 2, null, 1, [1, 5], 1, "1"]
(1 row)

SELECT jsonb_plpy_eval('[1, 2, 1, [1, 5], 1, "1"]', '[x for x in _ if x > 1]');
ERROR:  TypeError: '>' not supported between instances of 'list' and 'int'
CONTEXT:  Traceback (most recent call last):
  PL/Python function "jsonb_plpy_eval", line 5, in <module>
    raise ex
  PL/Python function "jsonb_plpy_eval", line 3, in __plpython_procedure_jsonb_plpy_eval_16411
    return eval(code, { '_' : js })
  PL/Python function "jsonb_plpy_eval", line 0, in <module>
    def __plpython_procedure_jsonb_plpy_eval_16411():
  PL/Python function "jsonb_plpy_eval", line 0, in <listcomp>
    def __plpython_procedure_jsonb_plpy_eval_16411():
PL/Python function "jsonb_plpy_eval"
SELECT jsonb_plpy_eval('[1, 2, 1, 3, 1, "1"]', '[x for x in _ if x > 1]');
ERROR:  TypeError: '>' not supported between instances of 'str' and 'int'
CONTEXT:  Traceback (most recent call last):
  PL/Python function "jsonb_plpy_eval", line 5, in <module>
    raise ex
  PL/Python function "jsonb_plpy_eval", line 3, in __plpython_procedure_jsonb_plpy_eval_16411
    return eval(code, { '_' : js })
  PL/Python function "jsonb_plpy_eval", line 0, in <module>
    def __plpython_procedure_jsonb_plpy_eval_16411():
  PL/Python function "jsonb_plpy_eval", line 0, in <listcomp>
    def __plpython_procedure_jsonb_plpy_eval_16411():
PL/Python function "jsonb_plpy_eval"
SELECT jsonb_plpy_eval('[1, 2, 1, 3, 1, 5]', '[x for x in _ if x > 1]');
 jsonb_plpy_eval 
-----------------
 [2, 3, 5]
(1 row)

-- test object subscription
SELECT jsonb_plpy_eval('{}', '_[0]');
ERROR:  KeyError: "key '0' is absent in JsonbObject"
CONTEXT:  Traceback (most recent call last):
  PL/Python function "jsonb_plpy_eval", line 5, in <module>
    raise ex
  PL/Python function "jsonb_plpy_eval", line 3, in __plpython_procedure_jsonb_plpy_eval_16411
    return eval(code, { '_' : js })
  PL/Python function "jsonb_plpy_eval", line 0, in <module>
    def __plpython_procedure_jsonb_plpy_eval_16411():
PL/Python function "jsonb_plpy_eval"
SELECT jsonb_plpy_eval('{}', '_["a"]');
ERROR:  KeyError: "key 'a' is absent in JsonbObject"
CONTEXT:  Traceback (most recent call last):
  PL/Python function "jsonb_plpy_eval", line 5, in <module>
    raise ex
  PL/Python function "jsonb_plpy_eval", line 3, in __plpython_procedure_jsonb_plpy_eval_16411
    return eval(code, { '_' : js })
  PL/Python function "jsonb_plpy_eval", line 0, in <module>
    def __plpython_procedure_jsonb_plpy_eval_16411():
PL/Python function "jsonb_plpy_eval"
SELECT jsonb_plpy_eval('{"a": 123}', '_["a"]');
 jsonb_plpy_eval 
-----------------
 123
(1 row)

-- test '"key" in object'
SELECT jsonb_plpy_eval('{"a": 123}', '"a" in _');
 jsonb_plpy_eval 
-----------------
 true
(1 row)

SELECT jsonb_plpy_eval('{"a": 123}', '"b" in _');
 jsonb_plpy_eval 
-----------------
 false
(1 row)

SELECT jsonb_plpy_eval('{"a": 123}', '123 in _');
 jsonb_plpy_eval 
-----------------
 false
(1 row)

-- test object .get() method
SELECT jsonb_plpy_eval('{"a": 123}', '_.get("a")');
 jsonb_plpy_eval 
-----------------
 123
(1 row)

SELECT jsonb_plpy_eval('{"a": 123}', '_.get(1)');
 jsonb_plpy_eval 
-----------------
 
(1 row)

SELECT jsonb_plpy_eval('{"a": 123}', '_.get(1) == None');
 jsonb_plpy_eval 
-----------------
 true
(1 row)

SELECT jsonb_plpy_eval('{"a": 123}', '_.get(1)');
 jsonb_plpy_eval 
-----------------
 
(1 row)

SELECT jsonb_plpy_eval('{"a": 123}', '_.get(1, "default")');
 jsonb_plpy_eval 
-----------------
 "default"
(1 row)

-- test object .keys() methods
SELECT jsonb_plpy_eval('{"a": 1, "aa": ["x", false], "b": {"y": "aaa", "z": 2.3}}', '_.keys()');
 jsonb_plpy_eval  
------------------
 ["a", "b", "aa"]
(1 row)

-- test object .values() methods
SELECT jsonb_plpy_eval('{"a": 1, "aa": ["x", false], "b": {"y": "aaa", "z": 2.3}}', '_.values()');
              jsonb_plpy_eval              
-------------------------------------------
 [1, {"y": "aaa", "z": 2.3}, ["x", false]]
(1 row)

-- test object .items() methods
SELECT jsonb_plpy_eval('{"a": 1, "aa": ["x", false], "b": {"y": "aaa", "z": 2.3}}', '_.items()');
                         jsonb_plpy_eval                         
-----------------------------------------------------------------
 [["a", 1], ["b", {"y": "aaa", "z": 2.3}], ["aa", ["x", false]]]
(1 row)

-- test object iteration by keys
SELECT jsonb_plpy_eval('{}', 'type(iter(_))');
           jsonb_plpy_eval            
--------------------------------------
 "<class 'plpy_jsonb.JsonbIterator'>"
(1 row)

SELECT jsonb_plpy_eval('{}', 'iter(_)');
 jsonb_plpy_eval 
-----------------
 []
(1 row)

SELECT jsonb_plpy_eval('{"a": 1, "b": null, "c": "xyz", "d": [4, 5], "e": {"x": 1, "y": "aaa"}}', 'iter(_)');
      jsonb_plpy_eval      
---------------------------
 ["a", "b", "c", "d", "e"]
(1 row)

SELECT jsonb_plpy_eval('{"a": 1, "b": null, "c": "xyz", "d": [4, 5], "e": {"x": 1, "y": "aaa"}}', '[k for k in _]');
      jsonb_plpy_eval      
---------------------------
 ["a", "b", "c", "d", "e"]
(1 row)

-- test object .iterkeys() method
SELECT jsonb_plpy_eval('{}', 'type(iter(_.keys()))');
           jsonb_plpy_eval           
-------------------------------------
 "<type 'plpy_jsonb.JsonbIterator'>"
(1 row)

SELECT jsonb_plpy_eval('{"a": 1, "aaa": null, "b": "xyz", "cc": [4, 5], "d": {"x": 1, "y": "aaa"}}', 'iter(_.keys())');
       jsonb_plpy_eval        
------------------------------
 ["a", "b", "d", "cc", "aaa"]
(1 row)

-- test object .itervalues() method
SELECT jsonb_plpy_eval('{}', 'type(iter(_.values()))');
           jsonb_plpy_eval           
-------------------------------------
 "<type 'plpy_jsonb.JsonbIterator'>"
(1 row)

SELECT jsonb_plpy_eval('{"a": 1, "aaa": null, "b": "xyz", "cc": [4, 5], "d": {"x": 1, "y": "aaa"}}', 'iter(_.values())');
                jsonb_plpy_eval                 
------------------------------------------------
 [1, "xyz", {"x": 1, "y": "aaa"}, [4, 5], null]
(1 row)

-- test object .iteritems() method
SELECT jsonb_plpy_eval('{}', 'type(iter(_.items()))');
           jsonb_plpy_eval           
-------------------------------------
 "<type 'plpy_jsonb.JsonbIterator'>"
(1 row)

SELECT jsonb_plpy_eval('{"a": 1, "aaa": null, "b": "xyz", "cc": [4, 5], "d": {"x": 1, "y": "aaa"}}', 'iter(_.items())');
                                   jsonb_plpy_eval                                    
--------------------------------------------------------------------------------------
 [["a", 1], ["b", "xyz"], ["d", {"x": 1, "y": "aaa"}], ["cc", [4, 5]], ["aaa", null]]
(1 row)

SELECT jsonb_plpy_eval('{"a": 1, "aaa": null, "b": "xyz", "cc": [4, 5], "d": {"x": 1, "y": "aaa"}}', '[str(i) for i in _.items()]');
                                           jsonb_plpy_eval                                            
------------------------------------------------------------------------------------------------------
 ["('a', 1)", "('b', 'xyz')", "('d', {\"x\": 1, \"y\": \"aaa\"})", "('cc', [4, 5])", "('aaa', None)"]
(1 row)

SELECT jsonb_plpy_eval('{"a": 1, "aaa": null, "b": "xyz", "cc": [4, 5], "d": {"x": 1, "y": "aaa"}}', '[(v, k) for (k, v) in _.items()]');
                                   jsonb_plpy_eval                                    
--------------------------------------------------------------------------------------
 [[1, "a"], ["xyz", "b"], [{"x": 1, "y": "aaa"}, "d"], [[4, 5], "cc"], [null, "aaa"]]
(1 row)

-- test comparison
SELECT jsonb_plpy_eval('{"a": 1}', '_ == _');
 jsonb_plpy_eval 
-----------------
 true
(1 row)

SELECT a, jsonb_plpy_eval('1.25', 'next([_ > a, _ >= a, _ == a, _ != a,  _ <= a, _ < a] for a in [' || a || '])')
FROM (VALUES ('1'), ('1.25'), ('0')) a(a);
  a   |             jsonb_plpy_eval             
------+-----------------------------------------
 1    | [true, true, false, true, false, false]
 1.25 | [false, true, true, false, true, false]
 0    | [true, true, false, true, false, false]
(3 rows)

SELECT a, jsonb_plpy_eval('[1, 2, 3]', 'next([_ > a, _ >= a, _ == a, _ != a,  _ <= a, _ < a] for a in [' || a || '])')
FROM (VALUES ('[]'), ('[1]'), ('[2]'), ('[1,2,3]'), ('[1,2,4]'), ('[1,2,2]'), ('[1,2,2,5]')) a(a);
     a     |             jsonb_plpy_eval             
-----------+-----------------------------------------
 []        | [true, true, false, true, false, false]
 [1]       | [true, true, false, true, false, false]
 [2]       | [false, false, false, true, true, true]
 [1,2,3]   | [false, true, true, false, true, false]
 [1,2,4]   | [false, false, false, true, true, true]
 [1,2,2]   | [true, true, false, true, false, false]
 [1,2,2,5] | [true, true, false, true, false, false]
(7 rows)

